---

services:
  backup:
    image: eeshugerman/postgres-backup-s3:16
    networks:
      - traefik-internetwork
      - db-internetwork
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure   
    environment:
      SCHEDULE: '@hourly'     # optional
      BACKUP_KEEP_DAYS: 7     # optional
      S3_REGION: ${S3_REGION}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_PREFIX: ${S3_PREFIX}
      POSTGRES_HOST: ${PG_HOST:-postgresql-master}
      POSTGRES_DATABASE: ${PG_DB:-authentik}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
      S3_ENDPOINT: ${S3_ENDPOINT}

  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.2}
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: valkey-server
      AUTHENTIK_REDIS__PASSWORD: ${VALKEY_AUTH_PASSWORD}
      AUTHENTIK_POSTGRESQL__HOST: postgresql-master
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__HOST: ${REPLICA_0_HOST}
      AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__PASSWORD: ${PG_PASS}
      AUTHENTIK_LOG_LEVEL: error
      AUTHENTIK_STORAGE__MEDIA__BACKEND: s3
      AUTHENTIK_STORAGE__MEDIA__S3__REGION: auto
      AUTHENTIK_STORAGE__MEDIA__S3__USE_SSL: "true"
      AUTHENTIK_STORAGE__MEDIA__S3__ENDPOINT: ${S3_ENDPOINT}
      AUTHENTIK_STORAGE__MEDIA__S3__BUCKET: ${S3_BUCKET}
      AUTHENTIK_STORAGE__MEDIA__S3__ACCESS_KEY: ${S3_ACCESS_KEY_ID}
      AUTHENTIK_STORAGE__MEDIA__S3__SECRET_KEY: ${S3_SECRET_ACCESS_KEY}
      AUTHENTIK_STORAGE__MEDIA__S3__BUCKET_NAME: ${S3_BUCKET}
    volumes:
      - authentik-server-media:/media
      - authentik-server-templates:/templates
    deploy:
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: rollback
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.platform.os == linux
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.authentik.rule=Host(`${UI_URL}`)"
        - "traefik.http.routers.authentik.entrypoints=websecure"
        - "traefik.http.services.authentik-server.loadbalancer.server.port=9000"
        - "traefik.http.routers.authentik.service=authentik-server"
        - "traefik.http.routers.authentik.tls.certresolver=letsencrypt"
        - "traefik.http.services.authentik-server.loadbalancer.sticky.cookie=true"
        - "traefik.http.services.authentik-server.loadbalancer.sticky.cookie.name=authentik_ha"
    networks:
      - traefik-internetwork
      - db-internetwork
  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.2}
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: valkey-server
      AUTHENTIK_REDIS__PASSWORD: ${VALKEY_AUTH_PASSWORD}
      AUTHENTIK_POSTGRESQL__HOST: postgresql-master
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__HOST: ${REPLICA_0_HOST}
      AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__PASSWORD: ${PG_PASS}
      AUTHENTIK_LOG_LEVEL: error
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - authentik-worker-media:/media
      - authentik-worker-certs:/certs
      - authentik-worker-templates:/templates
    networks:
      - db-internetwork
      - traefik-internetwork
    deploy:
      endpoint_mode: vip
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: rollback
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.platform.os == linux
          - node.role == worker

networks:
  db-internetwork:
    external: true
  traefik-internetwork:
    external: true

volumes:
  authentik-server-media:
    driver: local
    # Mount the volume to the SeaweedFS mount point
    driver_opts:
      type: none
      device: /mnt/seaweedfs/mount/authentik/server/media
      o: bind
  authentik-server-templates:
    driver: local
    # Mount the volume to the SeaweedFS mount point
    driver_opts:
      type: none
      device: /mnt/seaweedfs/mount/authentik/server/templates
      o: bind
  authentik-worker-media:
    driver: local
    # Mount the volume to the SeaweedFS mount point
    driver_opts:
      type: none
      device: /mnt/seaweedfs/mount/authentik/worker/media
      o: bind
  authentik-worker-certs:
    driver: local
    # Mount the volume to the SeaweedFS mount point
    driver_opts:
      type: none
      device: /mnt/seaweedfs/mount/authentik/worker/certs
      o: bind
  authentik-worker-templates:
    driver: local
    # Mount the volume to the SeaweedFS mount point
    driver_opts:
      type: none
      device: /mnt/seaweedfs/mount/authentik/worker/templates
      o: bind
