services:
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.52.0
    deploy:
      mode: global  # Runs on every node
      restart_policy:
        condition: any
    networks:
      - monitoring-internetwork
    labels:
      prometheus-job: "cadvisor"
    ports:
      - target: 8080
        published: 9080
        mode: host  # Exposes directly on the host network
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/:/rootfs:ro"
      - "/var/run:/var/run"
      - "/sys:/sys:ro"
      - "/var/lib/docker:/var/lib/docker:ro"
    command: ["-docker_only"]
  
  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.9.1
    command:
      - '--path.rootfs=/host'
    networks:
      - monitoring-internetwork
    deploy:
      mode: global
      restart_policy:
        condition: any
      labels:
        prometheus-job: "node-exporter"
    ports:
      - target: 9100
        published: 9100
        mode: host
    volumes:
      - '/:/host:ro,rslave'

  prometheus:
    image: prom/prometheus:v3.4.1
    user: root
    networks:
      - monitoring-internetwork
      - traefik-internetwork
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
      labels:
        traefik.enable: "true"
        traefik.http.routers.prometheus.rule: "Host(`prometheus.${DOMAIN_NAME}`)"
        traefik.http.routers.prometheus.entrypoints: "websecure"
        traefik.http.routers.prometheus.tls.certresolver: letsencrypt
        traefik.http.services.prometheus.loadbalancer.server.port: "9090"
    configs:
      - source: prometheus-conf
        target: /etc/prometheus/prometheus.yml
      - source: prometheus-rules
        target: /etc/prometheus/rules.yml
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
  
  grafana:
    image: grafana/grafana-oss:main-ubuntu
    networks:
      - traefik-internetwork
      - monitoring-internetwork
      - db-internetwork
    configs:
      - source: grafana-conf
        target: /etc/grafana/grafana.ini
    volumes:
      - grafana_storage:/var/lib/grafana
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
        reservations:
          cpus: "0.125"  
          memory: "128M"
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: rollback
        max_failure_ratio: 0.5
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.platform.os == linux
          - node.role == worker
      labels:
        # Label for Shepherd service for autoupdate
        - "shepherd.enable=true"
        - "service.autodeploy=true"
        # Frontend
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME}`)"
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
        - "traefik.http.services.grafana.loadbalancer.sticky.cookie=true"
        - "traefik.http.services.grafana.loadbalancer.sticky.cookie.name=grafana_ha"

  uptime-kuma:
    image: louislam/uptime-kuma:latest
    networks:
      - traefik-internetwork
      - monitoring-internetwork
      - db-internetwork
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.platform.os == linux
          - node.role == worker
      restart_policy:
        condition: any
      labels:
        traefik.enable: "true"
        traefik.http.routers.uptime-kuma.rule: "Host(`uptime.${DOMAIN_NAME}`)"
        traefik.http.routers.uptime-kuma.entrypoints: "websecure"
        traefik.http.routers.uptime-kuma.tls.certresolver: letsencrypt
        traefik.http.services.uptime-kuma.loadbalancer.server.port: "3001"
    volumes:
      - uptime_kuma_storage:/app/data

configs:
  grafana-conf:
    external: true
  prometheus-conf:
    external: true
  prometheus-rules:
    external: true

volumes:
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/seaweedfs/mount/prometheus/data
      o: bind
  grafana_storage:
    driver: local
    driver_opts:
      type: none
      device: /mnt/seaweedfs/mount/grafana
      o: bind
  uptime_kuma_storage:
    driver: local
    driver_opts:
      type: none
      device: /mnt/seaweedfs/mount/uptime-kuma
      o: bind

networks:
  monitoring-internetwork:
    external: true
  traefik-internetwork:
    external: true
  db-internetwork:
    external: true
